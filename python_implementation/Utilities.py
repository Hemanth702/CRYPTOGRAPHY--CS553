import binascii

"""Variables used in the process of encryption and decryption"""

# Construction of P matrix
def p_matrix():
	p = [None]*64
	for i in range(64):
		if i==63:
			p[63] = 63
		else:
			p[i] = ((16*i)%63)
	return p

# Construction of P_inv matrix
def pinv_matrix(p):
	p_inv = [None]*64
	for i in range(64):
		p_inv[p[i]] = i
	return p_inv

# Construction of Inverse S-Box matrix	
def sinv_box(S):
	Sinv = [None]*16
	for i in range(16):
		Sinv[S[i]] = i
	return Sinv


"""Functions for conversion of data-types"""
def bytetoStr(x):
	if isinstance(x,str):
		return x
	return x.decode('utf8')
	
def strtoByte(x):
	if isinstance(x,bytes):
		return x
	return x.encode('utf8')
	
def bytetoInt(x):
	if isinstance(x,int):
		return x
	return int(binascii.hexlify(x),16)
	
def inttoByte(x,N=1):
	if isinstance(x,bytes):
		return x
	return binascii.unhexlify(strtoByte("%0*x" % (N*2,x)))
	
def multiplication(a, b):
	prod = 0
	for k,v in enumerate(a):
		prod |= (bin(v & b)[2:].count('1')%2)<<(15-k)
	return prod



Sbox = [ 0x0, 0x4, 0x8, 0xf, 0x1, 0x5, 0xe, 0x9, 0x2, 0x7, 0xa, 0xc, 0xb, 0xd, 0x6, 0x3 ]	
Sinv = sinv_box(Sbox)
p_mat = p_matrix()
p_inv = pinv_matrix(p_mat)

l0 = [
		0b0000100010001000, 
		0b0000010001000100, 
		0b0000001000100010,
		0b0000000100010001, 
		0b1000000010001000, 
		0b0100000001000100,
		0b0010000000100010, 
		0b0001000000010001, 
		0b1000100000001000,
		0b0100010000000100, 
		0b0010001000000010, 
		0b0001000100000001,
		0b1000100010000000, 
		0b0100010001000000, 
		0b0010001000100000,
		0b0001000100010000,
		]

l0inv = l0

l1 = [
	  0b1100000000010000, 
	  0b0110000000001000, 
	  0b0011000000000100,
	  0b0001100000000010, 
	  0b0000110000000001, 
	  0b0000011010000000,
	  0b0000001101000000, 
	  0b1000000100100000, 
	  0b1000000000011000,
	  0b0100000000001100, 
	  0b0010000000000110, 
	  0b0001000000000011,
	  0b0000100010000001, 
	  0b0000010011000000, 
	  0b0000001001100000,
	  0b0000000100110000,
	]

l1inv = [
	  0b0000001100000010, 
	  0b1000000100000001, 
	  0b1100000010000000,
	  0b0110000001000000, 
	  0b0011000000100000, 
	  0b0001100000010000,
	  0b0000110000001000, 
	  0b0000011000000100, 
	  0b0001000000011000,
	  0b0000100000001100, 
	  0b0000010000000110, 
	  0b0000001000000011,
	  0b0000000110000001, 
	  0b1000000011000000, 
	  0b0100000001100000,
	  0b0010000000110000,
	]

l2 = [
	  0b0000110000000001, 
	  0b0000011010000000, 
	  0b0000001101000000,
	  0b1000000100100000, 
	  0b1100000000010000, 
	  0b0110000000001000,
	  0b0011000000000100, 
	  0b0001100000000010, 
	  0b0000100010000001,
	  0b0000010011000000, 
	  0b0000001001100000, 
	  0b0000000100110000,
	  0b1000000000011000, 
	  0b0100000000001100, 
	  0b0010000000000110,
	  0b0001000000000011,
	]

l2inv = [
	  0b0011000000100000, 
	  0b0001100000010000, 
	  0b0000110000001000,
	  0b0000011000000100, 
	  0b0000001100000010, 
	  0b1000000100000001,
	  0b1100000010000000, 
	  0b0110000001000000, 
	  0b0000000110000001,
	  0b1000000011000000, 
	  0b0100000001100000, 
	  0b0010000000110000,
	  0b0001000000011000, 
	  0b0000100000001100, 
	  0b0000010000000110,
	  0b0000001000000011,
	]

l3 = [
	  0b1000100000001000, 
	  0b0100010000000100, 
	  0b0010001000000010,
	  0b0001000100000001, 
	  0b1000100010000000, 
	  0b0100010001000000,
	  0b0010001000100000, 
	  0b0001000100010000, 
	  0b0000100010001000,
	  0b0000010001000100, 
	  0b0000001000100010, 
	  0b0000000100010001,
	  0b1000000010001000, 
	  0b0100000001000100, 
	  0b0010000000100010,
	  0b0001000000010001,
	]

l3inv = l3

